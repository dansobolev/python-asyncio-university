"""add discussion, comment and upload tables

Revision ID: 379b3b08c05d
Revises: a5648868b26a
Create Date: 2022-03-12 13:17:50.122745

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

import app.utils.custom_fields
from app.enums import UploadType

# revision identifiers, used by Alembic.
revision = '379b3b08c05d'
down_revision = 'a5648868b26a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('uploads',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('file_name', sa.String(), nullable=False),
                    sa.Column('type', app.utils.custom_fields.IntEnum(UploadType), nullable=False),
                    sa.Column('extension', sa.String(), nullable=False),
                    sa.Column('file_size', sa.Integer(), server_default='0', nullable=False),
                    sa.Column('file_mime_type', sa.String(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('discussions',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('creator_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discussion_comments',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('author_id', postgresql.UUID(), nullable=False),
    sa.Column('discussion_id', postgresql.UUID(), nullable=False),
    sa.Column('comment_text', sa.String(), nullable=False),
    sa.Column('replied_message_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['discussion_id'], ['discussions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['replied_message_id'], ['discussion_comments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discussions_participants_relation',
    sa.Column('discussion_id', postgresql.UUID(), nullable=False),
    sa.Column('participant_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['discussion_id'], ['discussions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['users.id'], ondelete='CASCADE')
    )
    op.create_table('comments_attachments_relation',
    sa.Column('comment_id', postgresql.UUID(), nullable=False),
    sa.Column('upload_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['discussion_comments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['upload_id'], ['uploads.id'], ondelete='CASCADE')
    )
    op.create_table('comments_mentions_relations',
    sa.Column('comment_id', postgresql.UUID(), nullable=False),
    sa.Column('author_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['comment_id'], ['discussion_comments.id'], ondelete='CASCADE')
    )
    op.drop_constraint('password_reset_links_user_id_fkey', 'password_reset_links', type_='foreignkey')
    op.create_foreign_key(None, 'password_reset_links', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('users', sa.Column('profile_image_id', postgresql.UUID(), nullable=True))
    op.add_column('users', sa.Column('is_banned', sa.Boolean(), nullable=True))
    op.create_foreign_key(None, 'users', 'uploads', ['profile_image_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('users_profile_image_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'is_banned')
    op.drop_column('users', 'profile_image_id')
    op.drop_constraint('password_reset_links_user_id_fkey', 'password_reset_links', type_='foreignkey')
    op.create_foreign_key('password_reset_links_user_id_fkey', 'password_reset_links', 'users', ['user_id'], ['id'])
    op.drop_table('comments_mentions_relations')
    op.drop_table('comments_attachments_relation')
    op.drop_table('discussions_participants_relation')
    op.drop_table('discussion_comments')
    op.drop_table('discussions')
    op.drop_table('uploads')
    # ### end Alembic commands ###
